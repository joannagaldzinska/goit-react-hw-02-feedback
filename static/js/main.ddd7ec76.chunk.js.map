{"version":3,"sources":["components/Statistics/index.jsx","components/FeedbackOptions/index.jsx","components/Section/index.jsx","components/Notification/index.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","LeaveFeedbackOptions","onGood","onBad","onNeutral","onClick","Section","title","children","className","s","section","Notification","message","App","handleGoodIncrement","setState","prevState","handleNeutralIncrement","handleBadIncrement","state","this","Math","round","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAsBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,qDAAwBC,EAAxB,YCCSC,EAVc,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC7C,OACE,gCACE,wBAAQC,QAASH,EAAjB,kBACA,wBAAQG,QAASD,EAAjB,qBACA,wBAAQC,QAASF,EAAjB,qB,gBCISG,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKC,UAAWC,IAAEC,QAAlB,UACE,oBAAIF,UAAWC,IAAEH,MAAjB,SAAyBA,IACxBC,MCHUI,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KCOtBC,E,kDACnB,aAAe,IAAD,8BACZ,gBASFC,oBAAsB,WACpB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BrB,KAAMqB,EAAUrB,KAAO,OAZb,EAedsB,uBAAyB,WACvB,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BpB,QAASoB,EAAUpB,QAAU,OAjBnB,EAoBdsB,mBAAqB,WACnB,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAC1BnB,IAAKmB,EAAUnB,IAAM,OAnBvB,EAAKsB,MAAQ,CACXxB,KAAM,EACNC,QAAS,EACTC,IAAK,GANK,E,qDA0BJ,IAAD,EACwBuB,KAAKD,MAA5BxB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAQvB,OACE,sBAAKW,UAAU,MAAf,UACE,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CACEL,OAAQmB,KAAKN,oBACbX,UAAWiB,KAAKH,uBAChBf,MAAOkB,KAAKF,uBAIhB,cAAC,EAAD,CAASZ,MAAM,aAAf,SACGX,EAAOC,EAAUC,IAAQ,EACxB,cAAC,EAAD,CAAce,QAAQ,sBAEtB,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MArBDH,EAAOC,EAAUC,EAsBhBE,mBAzBDsB,KAAKC,MAAO,IAAM3B,GAASE,EAAMD,EAAUD,e,GA9BvB4B,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ddd7ec76.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul>\n      <li>Good:{good}</li>\n      <li>Neutral:{neutral}</li>\n      <li>Bad:{bad}</li>\n      <li>Total:{total}</li>\n      <li>Possitive feedback:{positivePercentage} %</li>\n    </ul>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","const LeaveFeedbackOptions = ({ onGood, onBad, onNeutral }) => {\n  return (\n    <div>\n      <button onClick={onGood}>Good</button>\n      <button onClick={onNeutral}>Neutral</button>\n      <button onClick={onBad}>Bad</button>\n    </div>\n  );\n};\n\nexport default LeaveFeedbackOptions;\n","import s from './section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={s.section}>\n    <h2 className={s.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nexport default Section;\n","const Notification = ({ message }) => <h3>{message}</h3>;\n\nexport default Notification;\n","// import PropTypes from 'prop-types';\nimport Statistics from './components/Statistics';\nimport LeaveFeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\nimport React, { Component } from 'react';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n\n  handleGoodIncrement = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }));\n  };\n  handleNeutralIncrement = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }));\n  };\n  handleBadIncrement = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const countPositiveFeedbackPercentage = () => {\n      return Math.round((100 * good) / (bad + neutral + good));\n    };\n    const countTotalFeedback = () => {\n      return good + neutral + bad;\n    };\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <LeaveFeedbackOptions\n            onGood={this.handleGoodIncrement}\n            onNeutral={this.handleNeutralIncrement}\n            onBad={this.handleBadIncrement}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {good + neutral + bad === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}